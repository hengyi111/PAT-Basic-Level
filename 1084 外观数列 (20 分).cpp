// 1084 外观数列 (20 分)**
// 外观数列是指具有以下特点的整数序列：

// d, d1, d111, d113, d11231, d112213111, ...
// 它从不等于 1 的数字 d 开始，序列的第 n+1 项是对第 n 项的描述。比如第 2 项表示第 1 项有 1 个 d，所以就是 d1；第 2 项是 1 个 d（对应 d1）和 1 个 1（对应 11），所以第 3 项就是 d111。又比如第 4 项是 d113，其描述就是 1 个 d，2 个 1，1 个 3，所以下一项就是 d11231。当然这个定义对 d = 1 也成立。本题要求你推算任意给定数字 d 的外观数列的第 N 项。

// 输入格式：
// 输入第一行给出 [0,9] 范围内的一个整数 d、以及一个正整数 N（≤ 40），用空格分隔。

// 输出格式：
// 在一行中给出数字 d 的外观数列的第 N 项。

// 输入样例：
// 1 8
// 输出样例：
// 1123123111

#include <iostream>
#include <string>

using namespace std;

// 要注意，这里统计的数字都是要求相邻连续的
int main()
{
    char d;  // 读入字符
    int n;
    cin >> d >> n;

    string s(1, d);  // 刚开始字符串s就只由一个字符组成
    for (int i = 1; i < n; ++i) // 用来遍历到第n个数
    {
        string temp = "";
        int j = 0;
        while (j < s.size())
        {
            // 第一个字符，count为1,索引j也递增
            char ch = s[j];
            int count = 1;
            j++;
            // 统计连续的相等数字的个数
            while(s[j]==ch&&j<s.length())
            {
                count++;
                j++;
            }
            // 每次都对上一个字符串重新遍历，在空串后依次添加数字和出现次数
            temp += ch;
            temp += to_string(count);
        }
        s = temp;
    }
    cout << s << endl;

    return 0;
}
