// 1027 打印沙漏 (20 分)
// 本题要求你写个程序把给定的符号打印成沙漏的形状。例如给定17个“*”，要求按下列格式打印

// *****
//  ***
//   *
//  ***
// *****
// 所谓“沙漏形状”，是指每行输出奇数个符号；各行符号中心对齐；相邻两行符号数差2；符号数先从大到小顺序递减到1，再从小到大顺序递增；首尾符号数相等。

// 给定任意N个符号，不一定能正好组成一个沙漏。要求打印出的沙漏能用掉尽可能多的符号。

// 输入格式:
// 输入在一行给出1个正整数N（≤1000）和一个符号，中间以空格分隔。

// 输出格式:
// 首先打印出由给定符号组成的最大的沙漏形状，最后在一行中输出剩下没用掉的符号数。

// 输入样例:
// 19 *
// 输出样例:
// *****
//  ***
//   *
//  ***
// *****
// 2

#include <cmath>
#include <iostream>
#include <string>

using namespace std;

// result = (r+1)^2/2-1,r为行数，result为使用的符号数
int main()
{
    int n;
    char c;
    cin >> n >> c;
    int r = sqrt(2 * (n + 1)) - 1; //行数，sqrt得到小数，但r是int

    if (r % 2 == 0)
    {
        --r; // 要求行数必须为奇数
    }
    // 剩余未使用的符号数remain
    int remain = n - (r + 1) * (r + 1) / 2 + 1;
    // 输出上半部分
    for (int i = 0; i < r / 2; ++i)
    {
        cout << string(i, ' ');
        cout << string(r - 2 * i, c) << endl;
    }
    // 输出中间一个符号的一行
    cout << string(r / 2, ' ') << c << endl;
    // 输出下半部分
    for (int i = 0; i < r / 2; ++i)
    {
        cout << string(r / 2 - 1 - i, ' ');
        cout << string(2 * (i + 1) + 1, c) << endl;
    }
    cout << remain << endl;

    return 0;
}